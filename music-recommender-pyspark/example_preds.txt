#1. load pySpark modules 

from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.ml.recommendation import ALS

#2. load training data file into pySpark dataFrame format

training = spark.read.csv("trainItem.data", header = False)
training.show(5)

+------+------+---+
|   _c0|   _c1|_c2|
+------+------+---+
|199808|248969| 90|
|199808|  2663| 90|
|199808| 28341| 90|
|199808| 42563| 90|
|199808| 59092| 90|
+------+------+---+
only showing top 5 rows

#3.1 rename training dataFrame column names

training = training.withColumnRenamed("_c0", "userID").withColumnRenamed("_c1", "itemID").withColumnRenamed("_c2", "rating")
training.show(5)

+------+------+------+
|userID|itemID|rating|
+------+------+------+
|199808|248969|    90|
|199808|  2663|    90|
|199808| 28341|    90|
|199808| 42563|    90|
|199808| 59092|    90|
+------+------+------+
only showing top 5 rows

#3.2 assign training dataFrame column data types (dataFrame by default herein assume 'string' type)

from pyspark.sql.types import IntegerType
training = training.withColumn("userID", training["userID"].cast(IntegerType()))
training = training.withColumn("itemID", training["itemID"].cast(IntegerType()))
training = training.withColumn("rating", training["rating"].cast('float'))
training.show(3)

+------+------+------+
|userID|itemID|rating|
+------+------+------+
|199808|248969|  90.0|
|199808|  2663|  90.0|
|199808| 28341|  90.0|
+------+------+------+
only showing top 3 rows

#4. configure the ALS model

# Create ALS model
als = ALS(
    maxIter=5, 
    rank = 5,
    regParam=0.01,
    userCol="userID", 
    itemCol="itemID",
    ratingCol="rating", 
    nonnegative = True, 
    implicitPrefs = False,
    coldStartStrategy="drop"
)

#5. fit the ALS model using the training

model = als.fit(training)

#6. load testing data file into pySpark dataFrame format

testing = spark.read.csv("testItem.data", header = False)

testing = testing.withColumnRenamed("_c0", "userID").withColumnRenamed("_c1", "itemID").withColumnRenamed("_c2", "rating")
testing.show(5)

+------+------+------+
|userID|itemID|rating|
+------+------+------+
|199810|208019|     0|
|199810| 74139|     0|
|199810|  9903|     0|
|199810|242681|     0|
|199810| 18515|     0|
+------+------+------+
only showing top 5 rows

#7. rename testing dataFrame column names

testing = testing.withColumn("userID", testing["userID"].cast(IntegerType()))
testing = testing.withColumn("itemID", testing["itemID"].cast(IntegerType()))
testing = testing.withColumn("rating", testing["rating"].cast('float'))
testing.show(3)

+------+------+------+
|userID|itemID|rating|
+------+------+------+
|199810|208019|   0.0|
|199810| 74139|   0.0|
|199810|  9903|   0.0|
+------+------+------+
only showing top 3 rows

#8. predict ratings with testing dataFrame

predictions = model.transform(testing)
predictions.show(5)

+------+------+------+----------+
|userID|itemID|rating|prediction|
+------+------+------+----------+
|230073|   463|   0.0| 117.17483|
|230962|   471|   0.0| 45.472874|
|218845|  1088|   0.0| 110.16019|
|209697|  1088|   0.0|  37.22583|
|224445|  2142|   0.0| 34.644997|
+------+------+------+----------+
only showing top 5 rows

#9.1 save predictions result in a folder (the file name will be randomly assigned)

# save dataframe into a folder 'predictions' 
# with a single file (coalesce(1))
# but you can not assign the filename
predictions.coalesce(1).write.csv("predictions")

#9.2 save predictions result into a single file

# save dataframe to a single csv file 
predictions.toPandas().to_csv('myprediction.csv')